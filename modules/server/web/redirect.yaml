description: |-
  Node.js сервер, перенаправляющий запросы на адрес, указанный в заданном GET-параметре
  
  Если параметра нет, отправляет пользователю редирект на заданный URL.

author: vinzekatze
tags:
  - node.js
  - redirect
  - server

arguments:
  port:
    default:
    description: порт сервера
    replacer: '#port#'
    regex: '^([1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$'
  p:
    default: path
    description: имя параметра, откуда будет прочтен URL редиректа
    replacer: '#redirect-param#'
    metavar: PARAMETER
  i:
    default: '0.0.0.0'
    description: IP старта сервера
    replacer: '#ip#'
    metavar: IP
    regex: '^((25[0-5]|(2[0-4]|1\d|[1-9]|)\d)\.?\b){4}$'
  r:
    default: 'https://yandex.ru'
    description: URL сайта для редиректа
    replacer: '#redirect#'
    metavar: URL
  
  log:
    default:
      -
      - |-
        var data = {from_ip: req.socket.remoteAddress,
                    url: req.url,
                    date: Date(),
                    headers: req.headers,
                    body: req.body};
          console.log(data);
          console.log();
    description: показывать полный лог
    replacer: '#logging#'  

mode:
  format:
    i: '{0!r}'
    r: '{0!r}'

shell: node
script: |-
  const http = require('http')
  const url = require('url');
  const hostname = #ip#
  const port = #port#
  const redirect = #redirect#

  const server = http.createServer((req, res) => {
    url_parts = url.parse(req.url, true);
    query = url_parts.query;
    location = query.#redirect-param# ?? redirect
    res.writeHeader(302, { 'Location': location});
    res.end();
    console.log(`Redirecting request from ${req.socket.remoteAddress} to ${location}`)
    #logging#
  })

  server.listen(port, hostname, () => {
    console.log(`Server running at http://${hostname}:${port}/`);
    console.log();
    console.log(`Redirect URL: ${redirect}`);
    console.log(`Parameter:    #redirect-param#`);
    console.log();
  })